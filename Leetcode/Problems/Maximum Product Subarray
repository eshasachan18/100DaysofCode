class Solution {
public:
    int maxProduct(vector<int>& nums) 
    { int n=nums.size();
        vector<int>max_dp(n);
     vector<int>min_dp(n);
     max_dp[0]=nums[0];
     min_dp[0]=nums[0];
     for(int i=1;i<n;i++)
     {
         if(nums[i]<0)
         {
             max_dp[i]=max(nums[i]*min_dp[i-1],nums[i]);
             min_dp[i]=min(nums[i],max_dp[i-1]*nums[i]);
         }
         else
         {
             max_dp[i]=max(nums[i]*max_dp[i-1],nums[i]);
             min_dp[i]=min(nums[i],min_dp[i-1]*nums[i]);
         }
     }
     return *max_element(max_dp.begin(),max_dp.end());
       
    }
};
/*...................................another soln but time complexity is more............................*/
class Solution {
public:
    int maxProduct(vector<int>& nums) 
    {
        vector<vector<int>>dp(nums.size(),vector<int>(nums.size(),0));
        int n=nums.size(),ans=INT_MIN;
        for(int l=1;l<=n;l++)
        {
            for(int i=0;i<n-l+1;i++)
            {
                int j=i+l-1;
                if(i==j){dp[i][j]=nums[i];ans=max(ans,dp[i][j]);}
                else{dp[i][j]=dp[i][j-1]*nums[j];ans=max(ans,dp[i][j]);}
            }
        }
        return ans;
    }
};
