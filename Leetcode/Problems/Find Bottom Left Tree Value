/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) 
    {
     vector<vector<int>>ans;
        vector<int>v;
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        while(!q.empty())
        {
            auto node=q.front();
            q.pop();
            if(node==NULL)
            {
                ans.push_back(v);
                v.resize(0);
                if(!q.empty()){q.push(NULL);}
            }
            else
            {
                v.push_back(node->val);
                if(node->left){q.push(node->left);}
                if(node->right){q.push(node->right);}
            }
        }
        int n=ans.size();
        return ans[n-1][0];
    }
};
